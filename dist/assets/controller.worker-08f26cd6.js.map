{"version":3,"file":"controller.worker-08f26cd6.js","sources":["../node_modules/tinyqueue/index.js","../src/image-target/matching/hamming-distance.js","../src/image-target/matching/hough.js","../node_modules/is-any-array/lib-esm/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/mathOperations.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/decompositions.js","../src/image-target/utils/randomizer.js","../src/image-target/utils/geometry.js","../src/image-target/utils/homography.js","../src/image-target/matching/ransacHomography.js","../src/image-target/matching/matching.js","../src/image-target/matching/matcher.js","../src/image-target/estimation/estimate.js","../src/image-target/estimation/utils.js","../src/image-target/estimation/refine-estimate.js","../src/image-target/estimation/estimator.js","../src/image-target/controller.worker.js"],"sourcesContent":["\nexport default class TinyQueue {\n    constructor(data = [], compare = defaultCompare) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let left = (pos << 1) + 1;\n            let best = data[left];\n            const right = left + 1;\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","// Fast computation on number of bit sets\n// Ref: https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\nconst compute = (options) => {\n  const {v1, v2} = options;\n  let d = 0;\n\n  for (let i = 0; i < v1.length; i++) {\n    let x = (v1[i] ^ v2[i]) >>> 0;\n    d += bitCount(x);\n  }\n  return d;\n}\n\nconst bitCount = (v) => {\n  var c = v - ((v >> 1) & 0x55555555);\n  c = ((c >> 2) & 0x33333333) + (c & 0x33333333);\n  c = ((c >> 4) + c) & 0x0F0F0F0F;\n  c = ((c >> 8) + c) & 0x00FF00FF;\n  c = ((c >> 16) + c) & 0x0000FFFF;\n  return c;\n}\n\nexport {\n  compute\n};\n","const kHoughBinDelta = 1;\n\n// mathces [querypointIndex:x, keypointIndex: x]\nconst computeHoughMatches = (options) => {\n  const {keywidth, keyheight, querywidth, queryheight, matches} = options;\n\n  const maxX = querywidth * 1.2;\n  const minX = -maxX;\n  const maxY = queryheight * 1.2;\n  const minY = -maxY;\n  const numAngleBins = 12;\n  const numScaleBins = 10;\n  const minScale = -1;\n  const maxScale = 1;\n  const scaleK = 10.0;\n  const scaleOneOverLogK = 1.0 / Math.log(scaleK);\n  const maxDim = Math.max(keywidth, keyheight);\n  const keycenterX = Math.floor(keywidth / 2);\n  const keycenterY = Math.floor(keyheight / 2);\n\n  // compute numXBins and numYBins based on matches\n  const projectedDims = [];\n  for (let i = 0; i < matches.length; i++) {\n    const queryscale = matches[i].querypoint.scale;\n    const keyscale = matches[i].keypoint.scale;\n    if (keyscale == 0) console.log(\"ERROR divide zero\");\n    const scale = queryscale / keyscale;\n    projectedDims.push( scale * maxDim );\n  }\n\n  // TODO optimize median\n  //   weird. median should be [Math.floor(projectedDims.length/2) - 1] ?\n  projectedDims.sort((a1, a2) => {return a1 - a2});\n  const medianProjectedDim = projectedDims[ Math.floor(projectedDims.length/2) - (projectedDims.length%2==0?1:0) -1 ];\n\n  const binSize = 0.25 * medianProjectedDim;\n  const numXBins = Math.max(5, Math.ceil((maxX - minX) / binSize));\n  const numYBins = Math.max(5, Math.ceil((maxY - minY) / binSize));\n\n  const numXYBins = numXBins * numYBins;\n  const numXYAngleBins = numXYBins * numAngleBins;\n\n  // do voting\n  const querypointValids = [];\n  const querypointBinLocations = [];\n  const votes = {};\n  for (let i = 0; i < matches.length; i++) {\n    const querypoint = matches[i].querypoint;\n    const keypoint = matches[i].keypoint;\n\n    const {x, y, scale, angle} = _mapCorrespondence({querypoint, keypoint, keycenterX, keycenterY, scaleOneOverLogK});\n\n    // Check that the vote is within range\n    if (x < minX || x >= maxX || y < minY || y >= maxY || angle <= -Math.PI || angle > Math.PI || scale < minScale || scale >= maxScale) {\n      querypointValids[i] = false;\n      continue;\n    }\n\n    // map properties to bins\n    let fbinX = numXBins * (x - minX) / (maxX - minX);\n    let fbinY = numYBins * (y - minY) / (maxY - minY);\n    let fbinAngle = numAngleBins * (angle + Math.PI) / (2.0 * Math.PI);\n    let fbinScale = numScaleBins * (scale - minScale) / (maxScale - minScale);\n\n    querypointBinLocations[i] = {binX: fbinX, binY: fbinY, binAngle: fbinAngle, binScale: fbinScale};\n\n    let binX = Math.floor(fbinX - 0.5);\n    let binY = Math.floor(fbinY - 0.5);\n    let binScale = Math.floor(fbinScale - 0.5);\n    let binAngle = (Math.floor(fbinAngle - 0.5) + numAngleBins) % numAngleBins;\n\n    // check can vote all 16 bins\n    if (binX < 0 || binX + 1 >= numXBins || binY < 0 || binY + 1 >= numYBins || binScale < 0 || binScale +1 >= numScaleBins) {\n      querypointValids[i] = false;\n      continue;\n    }\n\n    for (let dx = 0; dx < 2; dx++) {\n      let binX2 = binX + dx;\n\n      for (let dy = 0; dy < 2; dy++) {\n        let binY2 = binY + dy;\n\n        for (let dangle = 0; dangle < 2; dangle++) {\n          let binAngle2 = (binAngle + dangle) % numAngleBins;\n\n          for (let dscale = 0; dscale < 2; dscale++) {\n            let binScale2 = binScale + dscale;\n\n            const binIndex = binX2 + binY2 * numXBins + binAngle2 * numXYBins + binScale2 * numXYAngleBins;\n\n            if (votes[binIndex] === undefined) votes[binIndex] = 0;\n            votes[binIndex] += 1;\n          }\n        }\n      }\n    }\n    querypointValids[i] = true;\n  }\n\n  let maxVotes = 0;\n  let maxVoteIndex = -1;\n  Object.keys(votes).forEach((index) => {\n    if (votes[index] > maxVotes) {\n      maxVotes = votes[index];\n      maxVoteIndex = index;\n    }\n  });\n\n  if (maxVotes < 3) return [];\n\n  // get back bins from vote index\n  const binX = Math.floor(((maxVoteIndex % numXYAngleBins) % numXYBins) % numXBins);\n  const binY = Math.floor((((maxVoteIndex - binX) % numXYAngleBins) % numXYBins) / numXBins);\n  const binAngle = Math.floor(((maxVoteIndex - binX - (binY * numXBins)) % numXYAngleBins) / numXYBins);\n  const binScale = Math.floor((maxVoteIndex - binX - (binY * numXBins) - (binAngle * numXYBins)) / numXYAngleBins);\n\n  //console.log(\"hough voted: \", {binX, binY, binAngle, binScale, maxVoteIndex});\n\n  const houghMatches = [];\n  for (let i = 0; i < matches.length; i++) {\n    if (!querypointValids[i]) continue;\n\n    const queryBins = querypointBinLocations[i];\n    // compute bin difference\n    const distBinX = Math.abs(queryBins.binX - (binX+0.5));\n    if (distBinX >= kHoughBinDelta) continue;\n\n    const distBinY = Math.abs(queryBins.binY - (binY+0.5));\n    if (distBinY >= kHoughBinDelta) continue;\n\n    const distBinScale = Math.abs(queryBins.binScale - (binScale+0.5));\n    if (distBinScale >= kHoughBinDelta) continue;\n\n    const temp = Math.abs(queryBins.binAngle - (binAngle+0.5));\n    const distBinAngle = Math.min(temp, numAngleBins - temp);\n    if (distBinAngle >= kHoughBinDelta) continue;\n\n    houghMatches.push(matches[i]);\n  }\n  return houghMatches;\n}\n\nconst _mapCorrespondence = ({querypoint, keypoint, keycenterX, keycenterY, scaleOneOverLogK}) => {\n  // map angle to (-pi, pi]\n  let angle = querypoint.angle - keypoint.angle;\n  if (angle <= -Math.PI) angle += 2*Math.PI;\n  else if (angle > Math.PI) angle -= 2*Math.PI;\n\n  const scale = querypoint.scale / keypoint.scale;\n\n  // 2x2 similarity\n  const cos = scale * Math.cos(angle);\n  const sin = scale * Math.sin(angle);\n  const S = [cos, -sin, sin, cos];\n\n  const tp = [\n    S[0] * keypoint.x + S[1] * keypoint.y,\n    S[2] * keypoint.x + S[3] * keypoint.y\n  ];\n  const tx = querypoint.x - tp[0];\n  const ty = querypoint.y - tp[1];\n\n  return {\n    x: S[0] * keycenterX + S[1] * keycenterY + tx,\n    y: S[2] * keycenterX + S[3] * keycenterY + ty,\n    angle: angle,\n    scale: Math.log(scale) * scaleOneOverLogK\n  }\n}\n\nexport {\n  computeHoughMatches\n}\n","const toString = Object.prototype.toString;\n/**\n * Checks if an object is an instance of an Array (array or typed array).\n *\n * @param {any} value - Object to check.\n * @returns {boolean} True if the object is an array.\n */\nexport function isAnyArray(value) {\n    return toString.call(value).endsWith('Array]');\n}\n//# sourceMappingURL=index.js.map","import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n","import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n","const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import { isAnyArray } from 'is-any-array';\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nexport function checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","import { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkNonEmpty,\n  checkRowIndices,\n  checkColumnIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","const mRandSeed = 1234;\n\nconst createRandomizer = () => {\n  const randomizer = {\n    seed: mRandSeed,\n\n    arrayShuffle(options) {\n      const {arr, sampleSize} = options;\n      for (let i = 0; i < sampleSize; i++) {\n\n        this.seed = (214013 * this.seed + 2531011) % (1 << 31);\n        let k = (this.seed >> 16) & 0x7fff;\n        k = k % arr.length;\n\n        let tmp = arr[i];\n        arr[i] = arr[k];\n        arr[k] = tmp;\n      }\n    },\n\n    nextInt(maxValue) {\n      this.seed = (214013 * this.seed + 2531011) % (1 << 31);\n      let k = (this.seed >> 16) & 0x7fff;\n      k = k % maxValue;\n      return k;\n    }\n  }\n  return randomizer;\n}\nexport {\n  createRandomizer\n}\n","// check which side point C on the line from A to B\nconst linePointSide = (A, B, C) => {\n  return ((B[0]-A[0])*(C[1]-A[1])-(B[1]-A[1])*(C[0]-A[0]));\n}\n\n// srcPoints, dstPoints: array of four elements [x, y]\nconst checkFourPointsConsistent = (x1, x2, x3, x4, x1p, x2p, x3p, x4p) => {\n  if ((linePointSide(x1, x2, x3) > 0) !== (linePointSide(x1p, x2p, x3p) > 0)) return false;\n  if ((linePointSide(x2, x3, x4) > 0) !== (linePointSide(x2p, x3p, x4p) > 0)) return false;\n  if ((linePointSide(x3, x4, x1) > 0) !== (linePointSide(x3p, x4p, x1p) > 0)) return false;\n  if ((linePointSide(x4, x1, x2) > 0) !== (linePointSide(x4p, x1p, x2p) > 0)) return false;\n  return true;\n}\n\nconst checkThreePointsConsistent = (x1, x2, x3, x1p, x2p, x3p) => {\n  if ((linePointSide(x1, x2, x3) > 0) !== (linePointSide(x1p, x2p, x3p) > 0)) return false;\n  return true;\n}\n\nconst determinant = (A) => {\n  const C1 =  A[4] * A[8] - A[5] * A[7];\n  const C2 =  A[3] * A[8] - A[5] * A[6];\n  const C3 =  A[3] * A[7] - A[4] * A[6];\n  return A[0] * C1 - A[1] * C2 + A[2] * C3;\n}\n\nconst matrixInverse33 = (A, threshold) => {\n  const det = determinant(A);\n  if (Math.abs(det) <= threshold) return null;\n  const oneOver = 1.0 / det;\n\n  const B = [\n    (A[4] * A[8] - A[5] * A[7]) * oneOver,\n    (A[2] * A[7] - A[1] * A[8]) * oneOver,\n    (A[1] * A[5] - A[2] * A[4]) * oneOver,\n    (A[5] * A[6] - A[3] * A[8]) * oneOver,\n    (A[0] * A[8] - A[2] * A[6]) * oneOver,\n    (A[2] * A[3] - A[0] * A[5]) * oneOver,\n    (A[3] * A[7] - A[4] * A[6]) * oneOver,\n    (A[1] * A[6] - A[0] * A[7]) * oneOver,\n    (A[0] * A[4] - A[1] * A[3]) * oneOver,\n  ];\n  return B;\n}\n\nconst matrixMul33 = (A, B) => {\n  const C = [];\n  C[0] = A[0]*B[0] + A[1]*B[3] + A[2]*B[6];\n  C[1] = A[0]*B[1] + A[1]*B[4] + A[2]*B[7];\n  C[2] = A[0]*B[2] + A[1]*B[5] + A[2]*B[8];\n  C[3] = A[3]*B[0] + A[4]*B[3] + A[5]*B[6];\n  C[4] = A[3]*B[1] + A[4]*B[4] + A[5]*B[7];\n  C[5] = A[3]*B[2] + A[4]*B[5] + A[5]*B[8];\n  C[6] = A[6]*B[0] + A[7]*B[3] + A[8]*B[6];\n  C[7] = A[6]*B[1] + A[7]*B[4] + A[8]*B[7];\n  C[8] = A[6]*B[2] + A[7]*B[5] + A[8]*B[8];\n  return C;\n}\n\nconst multiplyPointHomographyInhomogenous = (x, H) => {\n  const w = H[6]*x[0] + H[7]*x[1] + H[8];\n  const xp = [];\n  xp[0] = (H[0]*x[0] + H[1]*x[1] + H[2])/w;\n  xp[1] = (H[3]*x[0] + H[4]*x[1] + H[5])/w;\n  return xp;\n}\n\nconst smallestTriangleArea = (x1, x2, x3, x4) => {\n  const v12 = _vector(x2, x1);\n  const v13 = _vector(x3, x1);\n  const v14 = _vector(x4, x1);\n  const v32 = _vector(x2, x3);\n  const v34 = _vector(x4, x3);\n  const a1 = _areaOfTriangle(v12, v13);\n  const a2 = _areaOfTriangle(v13, v14);\n  const a3 = _areaOfTriangle(v12, v14);\n  const a4 = _areaOfTriangle(v32, v34);\n  return Math.min(Math.min(Math.min(a1, a2), a3), a4);\n}\n\n// check if four points form a convex quadrilaternal.\n// all four combinations should have same sign\nconst quadrilateralConvex = (x1, x2, x3, x4) => {\n  const first = linePointSide(x1, x2, x3) <= 0;\n  if ( (linePointSide(x2, x3, x4) <= 0) !== first) return false;\n  if ( (linePointSide(x3, x4, x1) <= 0) !== first) return false;\n  if ( (linePointSide(x4, x1, x2) <= 0) !== first) return false;\n\n  //if (linePointSide(x1, x2, x3) <= 0) return false;\n  //if (linePointSide(x2, x3, x4) <= 0) return false;\n  //if (linePointSide(x3, x4, x1) <= 0) return false;\n  //if (linePointSide(x4, x1, x2) <= 0) return false;\n  return true;\n}\n\nconst _vector = (a, b) => {\n  return [\n    a[0] - b[0],\n    a[1] - b[1]\n  ]\n}\n\nconst _areaOfTriangle = (u, v) => {\n  const a = u[0]*v[1] - u[1]*v[0];\n  return Math.abs(a) * 0.5;\n}\n\nexport {\n  matrixInverse33,\n  matrixMul33,\n  quadrilateralConvex,\n  smallestTriangleArea,\n  multiplyPointHomographyInhomogenous,\n  checkThreePointsConsistent,\n  checkFourPointsConsistent,\n  determinant\n}\n\n","import {Matrix, inverse} from 'ml-matrix';\n\nconst solveHomography = (srcPoints, dstPoints) => {\n  const {normPoints: normSrcPoints, param: srcParam} = _normalizePoints(srcPoints);\n  const {normPoints: normDstPoints, param: dstParam} = _normalizePoints(dstPoints);\n\n  const num = normDstPoints.length;\n  const AData = [];\n  const BData = [];\n  for (let j = 0; j < num; j++) {\n    const row1 = [\n      normSrcPoints[j][0],\n      normSrcPoints[j][1],\n      1,\n      0,\n      0,\n      0,\n      -(normSrcPoints[j][0] * normDstPoints[j][0]),\n      -(normSrcPoints[j][1] * normDstPoints[j][0]),\n    ];\n    const row2 = [\n      0,\n      0,\n      0,\n      normSrcPoints[j][0],\n      normSrcPoints[j][1],\n      1,\n      -(normSrcPoints[j][0] * normDstPoints[j][1]),\n      -(normSrcPoints[j][1] * normDstPoints[j][1]),\n    ];\n    AData.push(row1);\n    AData.push(row2);\n\n    BData.push([normDstPoints[j][0]]);\n    BData.push([normDstPoints[j][1]]);\n  }\n\n  try {\n    const A = new Matrix(AData);\n    const B = new Matrix(BData);\n    const AT = A.transpose();\n    const ATA = AT.mmul(A);\n    const ATB = AT.mmul(B);\n    const ATAInv = inverse(ATA);\n    const C = ATAInv.mmul(ATB).to1DArray();\n    const H = _denormalizeHomography(C, srcParam, dstParam);\n    return H;\n  } catch (e) {\n    return null;\n  }\n}\n\n// centroid at origin and avg distance from origin is sqrt(2)\nconst _normalizePoints = (coords) => {\n  //return {normalizedCoords: coords, param: {meanX: 0, meanY: 0, s: 1}}; // skip normalization\n\n  let sumX = 0;\n  let sumY = 0;\n  for (let i = 0; i < coords.length; i++) {\n    sumX += coords[i][0];\n    sumY += coords[i][1];\n  }\n  let meanX = sumX / coords.length;\n  let meanY = sumY / coords.length;\n\n  let sumDiff = 0;\n  for (let i = 0; i < coords.length; i++) {\n    const diffX = coords[i][0] - meanX;\n    const diffY = coords[i][1] - meanY;\n    sumDiff += Math.sqrt(diffX * diffX + diffY * diffY);\n  }\n  let s = Math.sqrt(2) * coords.length / sumDiff;\n\n  const normPoints = [];\n  for (let i = 0; i < coords.length; i++) {\n    normPoints.push([\n      (coords[i][0] - meanX) * s,\n      (coords[i][1] - meanY) * s,\n    ]);\n  }\n  return {normPoints, param: {meanX, meanY, s}};\n}\n\n// Denormalize homography\n// where T is the normalization matrix, i.e.\n//\n//     [1  0  -meanX]\n// T = [0  1  -meanY]\n//     [0  0     1/s]\n//\n//          [1  0  s*meanX]\n// inv(T) = [0  1  s*meanY]\n// \t    [0  0        s]\n//\n// H = inv(Tdst) * Hn * Tsrc\n//\n// @param {\n//   nH: normH,\n//   srcParam: param of src transform,\n//   dstParam: param of dst transform\n// }\nconst _denormalizeHomography = (nH, srcParam, dstParam) => {\n  /*\n  Matrix version\n  const normH = new Matrix([\n    [nH[0], nH[1], nH[2]],\n    [nH[3], nH[4], nH[5]],\n    [nH[6], nH[7], 1],\n  ]);\n  const Tsrc = new Matrix([\n    [1, 0, -srcParam.meanX],\n    [0, 1, -srcParam.meanY],\n    [0, 0,    1/srcParam.s],\n  ]);\n\n  const invTdst = new Matrix([\n    [1, 0, dstParam.s * dstParam.meanX],\n    [0, 1, dstParam.s * dstParam.meanY],\n    [0, 0, dstParam.s],\n  ]);\n  const H = invTdst.mmul(normH).mmul(Tsrc);\n  */\n\n  // plain implementation of the above using Matrix\n  const sMeanX = dstParam.s * dstParam.meanX;\n  const sMeanY = dstParam.s * dstParam.meanY;\n\n  const H = [\n      nH[0] + sMeanX * nH[6], \n      nH[1] + sMeanX * nH[7],\n      (nH[0] + sMeanX * nH[6]) * -srcParam.meanX + (nH[1] + sMeanX * nH[7]) * -srcParam.meanY + (nH[2] + sMeanX) / srcParam.s,\n      nH[3] + sMeanY * nH[6], \n      nH[4] + sMeanY * nH[7],\n      (nH[3] + sMeanY * nH[6]) * -srcParam.meanX + (nH[4] + sMeanY * nH[7]) * -srcParam.meanY + (nH[5] + sMeanY) / srcParam.s,\n      dstParam.s * nH[6],\n      dstParam.s * nH[7],\n      dstParam.s * nH[6] * -srcParam.meanX + dstParam.s * nH[7] * -srcParam.meanY + dstParam.s / srcParam.s,\n  ];\n\n  // make H[8] === 1;\n  for (let i = 0; i < 9; i++) {\n    H[i] = H[i] / H[8];\n  }\n  return H;\n}\n\nexport {\n  solveHomography\n}\n","import {Matrix, inverse} from 'ml-matrix';\nimport {createRandomizer} from '../utils/randomizer.js';\nimport {quadrilateralConvex, matrixInverse33, smallestTriangleArea, multiplyPointHomographyInhomogenous, checkThreePointsConsistent, checkFourPointsConsistent, determinant} from '../utils/geometry.js';\nimport {solveHomography} from '../utils/homography.js';\n\nconst CAUCHY_SCALE = 0.01;\nconst CHUNK_SIZE = 10;\nconst NUM_HYPOTHESES = 20;\nconst NUM_HYPOTHESES_QUICK = 10;\n\n// Using RANSAC to estimate homography\nconst computeHomography = (options) => {\n  const {srcPoints, dstPoints, keyframe, quickMode} = options;\n\n  // testPoints is four corners of keyframe\n  const testPoints = [\n    [0, 0],\n    [keyframe.width, 0],\n    [keyframe.width, keyframe.height],\n    [0, keyframe.height]\n  ]\n\n  const sampleSize = 4; // use four points to compute homography\n  if (srcPoints.length < sampleSize) return null;\n\n  const scale = CAUCHY_SCALE;\n  const oneOverScale2 = 1.0 / (scale * scale);\n  const chuckSize = Math.min(CHUNK_SIZE, srcPoints.length);\n\n  const randomizer = createRandomizer();\n\n  const perm = [];\n  for (let i = 0; i < srcPoints.length; i++) {\n    perm[i] = i;\n  }\n\n  randomizer.arrayShuffle({arr: perm, sampleSize: perm.length});\n\n  const numHypothesis = quickMode? NUM_HYPOTHESES_QUICK: NUM_HYPOTHESES;\n  const maxTrials = numHypothesis * 2;\n\n  // build numerous hypotheses by randoming draw four points\n  // TODO: optimize: if number of points is less than certain number, can brute force all combinations\n  let trial = 0;\n  const Hs = [];\n  while (trial < maxTrials && Hs.length < numHypothesis) {\n    trial +=1;\n\n    randomizer.arrayShuffle({arr: perm, sampleSize: sampleSize});\n\n    // their relative positions match each other\n    if (!checkFourPointsConsistent(\n      srcPoints[perm[0]], srcPoints[perm[1]], srcPoints[perm[2]], srcPoints[perm[3]],\n      dstPoints[perm[0]], dstPoints[perm[1]], dstPoints[perm[2]], dstPoints[perm[3]])) {\n      continue;\n    }\n\n    const H = solveHomography(\n      [srcPoints[perm[0]], srcPoints[perm[1]], srcPoints[perm[2]], srcPoints[perm[3]]],\n      [dstPoints[perm[0]], dstPoints[perm[1]], dstPoints[perm[2]], dstPoints[perm[3]]],\n    );\n    if (H === null) continue;\n\n    if(!_checkHomographyPointsGeometricallyConsistent({H, testPoints})) {\n      continue;\n    }\n\n    Hs.push(H);\n  }\n\n  if (Hs.length === 0) return null;\n\n  // pick the best hypothesis\n  const hypotheses = [];\n  for (let i = 0; i < Hs.length; i++) {\n    hypotheses.push({\n      H: Hs[i],\n      cost: 0\n    })\n  }\n\n  let curChuckSize = chuckSize;\n  for (let i = 0; i < srcPoints.length && hypotheses.length > 2; i += curChuckSize) {\n    curChuckSize = Math.min(chuckSize, srcPoints.length - i);\n    let chuckEnd = i + curChuckSize;\n\n    for (let j = 0; j < hypotheses.length; j++) {\n      for (let k = i; k < chuckEnd; k++) {\n        const cost = _cauchyProjectiveReprojectionCost({H: hypotheses[j].H, srcPoint: srcPoints[k], dstPoint: dstPoints[k], oneOverScale2});\n        hypotheses[j].cost += cost;\n      }\n    }\n\n    hypotheses.sort((h1, h2) => {return h1.cost - h2.cost});\n    hypotheses.splice(-Math.floor((hypotheses.length+1)/2)); // keep the best half\n  }\n\n  let finalH = null;\n  for (let i = 0; i < hypotheses.length; i++) {\n    const H = _normalizeHomography({inH: hypotheses[i].H});\n    if (_checkHeuristics({H: H, testPoints, keyframe})) {\n      finalH = H;\n      break;\n    }\n  }\n  return finalH;\n}\n\nconst _checkHeuristics = ({H, testPoints, keyframe}) => {\n  const HInv = matrixInverse33(H, 0.00001);\n  if (HInv === null) return false;\n\n  const mp = []\n  for (let i = 0; i < testPoints.length; i++) { // 4 test points, corner of keyframe\n    mp.push(multiplyPointHomographyInhomogenous(testPoints[i], HInv));\n  }\n  const smallArea = smallestTriangleArea(mp[0], mp[1], mp[2], mp[3]);\n\n  if (smallArea < keyframe.width * keyframe.height * 0.0001) return false;\n\n  if (!quadrilateralConvex(mp[0], mp[1], mp[2], mp[3])) return false;\n\n  return true;\n}\n\nconst _normalizeHomography = ({inH}) => {\n  const oneOver = 1.0 / inH[8];\n\n  const H = [];\n  for (let i = 0; i < 8; i++) {\n    H[i] = inH[i] * oneOver;\n  }\n  H[8] = 1.0;\n  return H;\n}\n\nconst _cauchyProjectiveReprojectionCost = ({H, srcPoint, dstPoint, oneOverScale2}) => {\n  const x = multiplyPointHomographyInhomogenous(srcPoint, H);\n  const f =[\n    x[0] - dstPoint[0],\n    x[1] - dstPoint[1]\n  ];\n  return Math.log(1 + (f[0]*f[0]+f[1]*f[1]) * oneOverScale2);\n}\n\nconst _checkHomographyPointsGeometricallyConsistent = ({H, testPoints}) => {\n  const mappedPoints = [];\n  for (let i = 0; i < testPoints.length; i++) {\n    mappedPoints[i] = multiplyPointHomographyInhomogenous(testPoints[i], H);\n  }\n  for (let i = 0; i < testPoints.length; i++) {\n    const i1 = i;\n    const i2 = (i+1) % testPoints.length;\n    const i3 = (i+2) % testPoints.length;\n    if (!checkThreePointsConsistent(\n      testPoints[i1], testPoints[i2], testPoints[i3],\n      mappedPoints[i1], mappedPoints[i2], mappedPoints[i3])) return false;\n  }\n  return true;\n}\n\nexport {\n  computeHomography,\n}\n","import TinyQueue from 'tinyqueue';\nimport {compute as hammingCompute} from './hamming-distance.js';\nimport {computeHoughMatches} from './hough.js';\nimport {computeHomography} from './ransacHomography.js';\nimport {multiplyPointHomographyInhomogenous, matrixInverse33} from '../utils/geometry.js';\n\nconst INLIER_THRESHOLD = 3;\n//const MIN_NUM_INLIERS = 8;  //default\nconst MIN_NUM_INLIERS = 6;\nconst CLUSTER_MAX_POP = 8;\nconst HAMMING_THRESHOLD = 0.7;\n\n// match list of querpoints against pre-built list of keyframes\nconst match = ({keyframe, querypoints, querywidth, queryheight, debugMode}) => {\n  let debugExtra = {};\n\n  const matches = [];\n  for (let j = 0; j < querypoints.length; j++) {\n    const querypoint = querypoints[j];\n    const keypoints = querypoint.maxima? keyframe.maximaPoints: keyframe.minimaPoints;\n    if (keypoints.length === 0) continue;\n\n    const rootNode = querypoint.maxima? keyframe.maximaPointsCluster.rootNode: keyframe.minimaPointsCluster.rootNode;\n\n    const keypointIndexes = [];\n    const queue = new TinyQueue([], (a1, a2) => {return a1.d - a2.d});\n\n    // query all potential keypoints\n    _query({node: rootNode, keypoints, querypoint, queue, keypointIndexes, numPop: 0});\n\n    let bestIndex = -1;\n    let bestD1 = Number.MAX_SAFE_INTEGER;\n    let bestD2 = Number.MAX_SAFE_INTEGER;\n\n    for (let k = 0; k < keypointIndexes.length; k++) {\n      const keypoint = keypoints[keypointIndexes[k]];\n\n      const d = hammingCompute({v1: keypoint.descriptors, v2: querypoint.descriptors});\n      if (d < bestD1) {\n\tbestD2 = bestD1;\n\tbestD1 = d;\n\tbestIndex = keypointIndexes[k];\n      } else if (d < bestD2) {\n\tbestD2 = d;\n      }\n    }\n    if (bestIndex !== -1 && (bestD2 === Number.MAX_SAFE_INTEGER || (1.0 * bestD1 / bestD2) < HAMMING_THRESHOLD)) {\n      matches.push({querypoint, keypoint: keypoints[bestIndex]});\n    }\n  }\n\n  if (debugMode) {\n    debugExtra.matches = matches;\n  }\n\n  if (matches.length < MIN_NUM_INLIERS) return {debugExtra};\n\n  const houghMatches = computeHoughMatches({\n    keywidth: keyframe.width,\n    keyheight: keyframe.height,\n    querywidth,\n    queryheight,\n    matches,\n  });\n\n  if (debugMode) {\n    debugExtra.houghMatches = houghMatches;\n  }\n\n  const H = computeHomography({\n    srcPoints: houghMatches.map((m) => [m.keypoint.x, m.keypoint.y]),\n    dstPoints: houghMatches.map((m) => [m.querypoint.x, m.querypoint.y]),\n    keyframe,\n  });\n\n  if (H === null) return {debugExtra};\n\n  const inlierMatches = _findInlierMatches({\n    H,\n    matches: houghMatches,\n    threshold: INLIER_THRESHOLD\n  });\n  \n  if (debugMode) {\n    debugExtra.inlierMatches = inlierMatches;\n  }\n\n  if (inlierMatches.length < MIN_NUM_INLIERS) return {debugExtra}; \n\n  // do another loop of match using the homography\n  const HInv = matrixInverse33(H, 0.00001);\n  const dThreshold2 = 10 * 10;\n  const matches2 = [];\n  for (let j = 0; j < querypoints.length; j++) {\n    const querypoint = querypoints[j];\n    const mapquerypoint = multiplyPointHomographyInhomogenous([querypoint.x, querypoint.y], HInv);\n\n    let bestIndex = -1;\n    let bestD1 = Number.MAX_SAFE_INTEGER;\n    let bestD2 = Number.MAX_SAFE_INTEGER;\n\n    const keypoints = querypoint.maxima? keyframe.maximaPoints: keyframe.minimaPoints;\n\n    for (let k = 0; k < keypoints.length; k++) {\n      const keypoint = keypoints[k];\n\n      // check distance threshold\n      const d2 = (keypoint.x - mapquerypoint[0]) * (keypoint.x - mapquerypoint[0])\n\t\t+ (keypoint.y - mapquerypoint[1]) * (keypoint.y - mapquerypoint[1]);\n      if (d2 > dThreshold2) continue;\n\n      const d = hammingCompute({v1: keypoint.descriptors, v2: querypoint.descriptors});\n      if (d < bestD1) {\n\tbestD2 = bestD1;\n\tbestD1 = d;\n\tbestIndex = k;\n      } else if (d < bestD2) {\n\tbestD2 = d;\n      }\n    }\n\n    if (bestIndex !== -1 && (bestD2 === Number.MAX_SAFE_INTEGER || (1.0 * bestD1 / bestD2) < HAMMING_THRESHOLD)) {\n      matches2.push({querypoint, keypoint: keypoints[bestIndex]});\n    }\n  }\n\n  if (debugMode) {\n    debugExtra.matches2 = matches2;\n  }\n\n  const houghMatches2 = computeHoughMatches({\n    keywidth: keyframe.width,\n    keyheight: keyframe.height,\n    querywidth,\n    queryheight,\n    matches: matches2,\n  });\n\n  if (debugMode) {\n    debugExtra.houghMatches2 = houghMatches2;\n  }\n\n  const H2 = computeHomography({\n    srcPoints: houghMatches2.map((m) => [m.keypoint.x, m.keypoint.y]),\n    dstPoints: houghMatches2.map((m) => [m.querypoint.x, m.querypoint.y]),\n    keyframe,\n  });\n\n  if (H2 === null) return {debugExtra};\n\n  const inlierMatches2 = _findInlierMatches({\n    H: H2,\n    matches: houghMatches2,\n    threshold: INLIER_THRESHOLD\n  });\n\n  if (debugMode) {\n    debugExtra.inlierMatches2 = inlierMatches2;\n  }\n\n  return {H: H2, matches: inlierMatches2, debugExtra};\n};\n\nconst _query = ({node, keypoints, querypoint, queue, keypointIndexes, numPop}) => {\n  if (node.leaf) {\n    for (let i = 0; i < node.pointIndexes.length; i++) {\n      keypointIndexes.push(node.pointIndexes[i]);\n    }\n    return;\n  }\n\n  const distances = [];\n  for (let i = 0; i < node.children.length; i++) {\n    const childNode = node.children[i];\n    const centerPointIndex = childNode.centerPointIndex;\n    const d = hammingCompute({v1: keypoints[centerPointIndex].descriptors, v2: querypoint.descriptors});\n    distances.push(d);\n  }\n\n  let minD = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < node.children.length; i++) {\n    minD = Math.min(minD, distances[i]);\n  }\n\n  for (let i = 0; i < node.children.length; i++) {\n    if (distances[i] !== minD) {\n      queue.push({node: node.children[i], d: distances[i]});\n    }\n  }\n  for (let i = 0; i < node.children.length; i++) {\n    if (distances[i] === minD) {\n      _query({node: node.children[i], keypoints, querypoint, queue, keypointIndexes, numPop});\n    }\n  }\n\n  if (numPop < CLUSTER_MAX_POP && queue.length > 0) {\n    const {node, d} = queue.pop();\n    numPop += 1;\n    _query({node, keypoints, querypoint, queue, keypointIndexes, numPop});\n  }\n};\n\nconst _findInlierMatches = (options) => {\n  const {H, matches, threshold} = options;\n\n  const threshold2 = threshold * threshold;\n\n  const goodMatches = [];\n  for (let i = 0; i < matches.length; i++) {\n    const querypoint = matches[i].querypoint;\n    const keypoint = matches[i].keypoint;\n    const mp = multiplyPointHomographyInhomogenous([keypoint.x, keypoint.y], H);\n    const d2 = (mp[0] - querypoint.x) * (mp[0] - querypoint.x) + (mp[1] - querypoint.y) * (mp[1] - querypoint.y);\n    if (d2 <= threshold2) {\n      goodMatches.push( matches[i] );\n    }\n  }\n  return goodMatches;\n}\n\nexport {\n  match\n}\n","import {match} from './matching.js';\n\nclass Matcher {\n  constructor(queryWidth, queryHeight, debugMode = false) {\n    this.queryWidth = queryWidth;\n    this.queryHeight = queryHeight;\n    this.debugMode = debugMode;\n  }\n\n  matchDetection(keyframes, featurePoints) {\n    let debugExtra = {frames: []};\n\n    let bestResult = null;\n    for (let i = 0; i < keyframes.length; i++) {\n      const {H, matches, debugExtra: frameDebugExtra} = match({keyframe: keyframes[i], querypoints: featurePoints, querywidth: this.queryWidth, queryheight: this.queryHeight, debugMode: this.debugMode});\n      debugExtra.frames.push(frameDebugExtra);\n\n      if (H) {\n\tif (bestResult === null || bestResult.matches.length < matches.length) {\n\t  bestResult = {keyframeIndex: i, H, matches};\n\t}\n      }\n    }\n\n    if (bestResult === null) {\n      return {keyframeIndex: -1, debugExtra};\n    }\n\n    const screenCoords = [];\n    const worldCoords = [];\n    const keyframe = keyframes[bestResult.keyframeIndex];\n    for (let i = 0; i < bestResult.matches.length; i++) {\n      const querypoint = bestResult.matches[i].querypoint;\n      const keypoint = bestResult.matches[i].keypoint;\n      screenCoords.push({\n        x: querypoint.x,\n        y: querypoint.y,\n      })\n      worldCoords.push({\n        x: (keypoint.x + 0.5) / keyframe.scale,\n        y: (keypoint.y + 0.5) / keyframe.scale,\n        z: 0,\n      })\n    }\n    return {screenCoords, worldCoords, keyframeIndex: bestResult.keyframeIndex, debugExtra};\n  }\n}\n\nexport {\n  Matcher\n}\n","import {Matrix, inverse} from 'ml-matrix';\nimport {solveHomography} from '../utils/homography.js';\n\n// build world matrix with list of matching worldCoords|screenCoords\n//\n// Step 1. estimate homography with list of pairs\n// Ref: https://www.uio.no/studier/emner/matnat/its/TEK5030/v19/lect/lecture_4_3-estimating-homographies-from-feature-correspondences.pdf  (Basic homography estimation from points)\n//\n// Step 2. decompose homography into rotation and translation matrixes (i.e. world matrix)\n// Ref: can anyone provide reference?\nconst estimate = ({screenCoords, worldCoords, projectionTransform}) => {\n  const Harray = solveHomography(worldCoords.map((p) => [p.x, p.y]), screenCoords.map((p) => [p.x, p.y]));\n  const H = new Matrix([\n    [Harray[0], Harray[1], Harray[2]],\n    [Harray[3], Harray[4], Harray[5]],\n    [Harray[6], Harray[7], Harray[8]],\n  ]);\n\n  const K = new Matrix(projectionTransform);\n  const KInv = inverse(K);\n\n  const _KInvH = KInv.mmul(H);\n  const KInvH = _KInvH.to1DArray();\n\n  const norm1 = Math.sqrt( KInvH[0] * KInvH[0] + KInvH[3] * KInvH[3] + KInvH[6] * KInvH[6]);\n  const norm2 = Math.sqrt( KInvH[1] * KInvH[1] + KInvH[4] * KInvH[4] + KInvH[7] * KInvH[7]);\n  const tnorm = (norm1 + norm2) / 2;\n\n  const rotate = [];\n  rotate[0] = KInvH[0] / norm1;\n  rotate[3] = KInvH[3] / norm1;\n  rotate[6] = KInvH[6] / norm1;\n\n  rotate[1] = KInvH[1] / norm2;\n  rotate[4] = KInvH[4] / norm2;\n  rotate[7] = KInvH[7] / norm2;\n\n  rotate[2] = rotate[3] * rotate[7] - rotate[6] * rotate[4];\n  rotate[5] = rotate[6] * rotate[1] - rotate[0] * rotate[7];\n  rotate[8] = rotate[0] * rotate[4] - rotate[1] * rotate[3];\n\n  const norm3 = Math.sqrt(rotate[2] * rotate[2] + rotate[5] * rotate[5] + rotate[8] * rotate[8]);\n  rotate[2] /= norm3;\n  rotate[5] /= norm3;\n  rotate[8] /= norm3;\n\n  // TODO: artoolkit has check_rotation() that somehow switch the rotate vector. not sure what that does. Can anyone advice?\n  // https://github.com/artoolkitx/artoolkit5/blob/5bf0b671ff16ead527b9b892e6aeb1a2771f97be/lib/SRC/ARICP/icpUtil.c#L215\n\n  const tran = []\n  tran[0] = KInvH[2] / tnorm;\n  tran[1] = KInvH[5] / tnorm;\n  tran[2] = KInvH[8] / tnorm;\n\n  let initialModelViewTransform = [\n    [rotate[0], rotate[1], rotate[2], tran[0]],\n    [rotate[3], rotate[4], rotate[5], tran[1]],\n    [rotate[6], rotate[7], rotate[8], tran[2]]\n  ];\n\n  return initialModelViewTransform;\n};\n\nexport {\n  estimate\n}\n","const buildModelViewProjectionTransform = (projectionTransform, modelViewTransform) => {\n  // assume the projectTransform has the following format:\n  // [[fx, 0, cx],\n  //  [0, fy, cy]\n  //  [0, 0, 1]]\n  const modelViewProjectionTransform = [\n    [\n      projectionTransform[0][0] * modelViewTransform[0][0] + projectionTransform[0][2] * modelViewTransform[2][0],\n      projectionTransform[0][0] * modelViewTransform[0][1] + projectionTransform[0][2] * modelViewTransform[2][1],\n      projectionTransform[0][0] * modelViewTransform[0][2] + projectionTransform[0][2] * modelViewTransform[2][2],\n      projectionTransform[0][0] * modelViewTransform[0][3] + projectionTransform[0][2] * modelViewTransform[2][3],\n    ],\n    [\n      projectionTransform[1][1] * modelViewTransform[1][0] + projectionTransform[1][2] * modelViewTransform[2][0],\n      projectionTransform[1][1] * modelViewTransform[1][1] + projectionTransform[1][2] * modelViewTransform[2][1],\n      projectionTransform[1][1] * modelViewTransform[1][2] + projectionTransform[1][2] * modelViewTransform[2][2],\n      projectionTransform[1][1] * modelViewTransform[1][3] + projectionTransform[1][2] * modelViewTransform[2][3],\n    ],\n    [\n      modelViewTransform[2][0],\n      modelViewTransform[2][1],\n      modelViewTransform[2][2],\n      modelViewTransform[2][3],\n    ]\n  ];\n  return modelViewProjectionTransform;\n  \n  /*\n  // this is the full computation if the projectTransform does not look like the expected format, but more computations\n  //  \n  const modelViewProjectionTransform = [[],[],[]];\n  for (let j = 0; j < 3; j++ ) {\n    for (let i = 0; i < 4; i++) {\n      modelViewProjectionTransform[j][i] = projectionTransform[j][0] * modelViewTransform[0][i]\n                                         + projectionTransform[j][1] * modelViewTransform[1][i]\n                                         + projectionTransform[j][2] * modelViewTransform[2][i];\n    }\n  }\n  return modelViewProjectionTransform;\n  */\n}\n\nconst applyModelViewProjectionTransform = (modelViewProjectionTransform, x, y, z) => {\n  // assume z is zero\n  const ux = modelViewProjectionTransform[0][0] * x + modelViewProjectionTransform[0][1] * y + modelViewProjectionTransform[0][3];\n  const uy = modelViewProjectionTransform[1][0] * x + modelViewProjectionTransform[1][1] * y + modelViewProjectionTransform[1][3];\n  const uz = modelViewProjectionTransform[2][0] * x + modelViewProjectionTransform[2][1] * y + modelViewProjectionTransform[2][3];\n  return {x: ux, y: uy, z: uz};\n}\n\nconst computeScreenCoordiate = (modelViewProjectionTransform, x, y, z) => {\n  const {x: ux, y: uy, z: uz} = applyModelViewProjectionTransform(modelViewProjectionTransform, x, y, z);\n  //if( Math.abs(uz) < 0.000001 ) return null;\n  return {x: ux/uz, y: uy/uz};\n}\n\nconst screenToMarkerCoordinate = (modelViewProjectionTransform, sx, sy) => {\n  const c11 = modelViewProjectionTransform[2][0] * sx - modelViewProjectionTransform[0][0];\n  const c12 = modelViewProjectionTransform[2][1] * sx - modelViewProjectionTransform[0][1];\n  const c21 = modelViewProjectionTransform[2][0] * sy - modelViewProjectionTransform[1][0];\n  const c22 = modelViewProjectionTransform[2][1] * sy - modelViewProjectionTransform[1][1];\n  const b1  = modelViewProjectionTransform[0][3] - modelViewProjectionTransform[2][3] * sx;\n  const b2  = modelViewProjectionTransform[1][3] - modelViewProjectionTransform[2][3] * sy;\n\n  const m = c11 * c22 - c12 * c21;\n  return {\n    x: (c22 * b1 - c12 * b2) / m,\n    y: (c11 * b2 - c21 * b1) / m\n  }\n}\n\nexport {\n  buildModelViewProjectionTransform,\n  applyModelViewProjectionTransform,\n  computeScreenCoordiate,\n}\n","import {Matrix, inverse} from 'ml-matrix';\nimport { applyModelViewProjectionTransform, buildModelViewProjectionTransform, computeScreenCoordiate} from './utils.js';\n\nconst TRACKING_THRESH = 5.0; // default\nconst K2_FACTOR = 4.0; // Question: should it be relative to the size of the screen instead of hardcoded?\nconst ICP_MAX_LOOP = 10;\nconst ICP_BREAK_LOOP_ERROR_THRESH = 0.1;\nconst ICP_BREAK_LOOP_ERROR_RATIO_THRESH = 0.99;\nconst ICP_BREAK_LOOP_ERROR_THRESH2 = 4.0;\n\n// some temporary/intermediate variables used later. Declare them beforehand to reduce new object allocations\nlet mat = [[],[],[]]; \nlet J_U_Xc = [[],[]]; // 2x3\nlet J_Xc_S = [[],[],[]]; // 3x6\n\nconst refineEstimate = ({initialModelViewTransform, projectionTransform, worldCoords, screenCoords}) => {\n  // Question: shall we normlize the screen coords as well?\n  // Question: do we need to normlize the scale as well, i.e. make coords from -1 to 1\n  //\n  // normalize world coords - reposition them to center of mass\n  //   assume z coordinate is always zero (in our case, the image target is planar with z = 0\n  let dx = 0;\n  let dy = 0;\n  for (let i = 0; i < worldCoords.length; i++) {\n    dx += worldCoords[i].x;\n    dy += worldCoords[i].y;\n  }\n  dx /= worldCoords.length;\n  dy /= worldCoords.length;\n\n  const normalizedWorldCoords = [];\n  for (let i = 0; i < worldCoords.length; i++) {\n    normalizedWorldCoords.push({x: worldCoords[i].x - dx, y: worldCoords[i].y - dy, z: worldCoords[i].z});\n  }\n\n  const diffModelViewTransform = [[],[],[]];\n  for (let j = 0; j < 3; j++) {\n    for (let i = 0; i < 3; i++) {\n      diffModelViewTransform[j][i] = initialModelViewTransform[j][i];\n    }\n  }\n  diffModelViewTransform[0][3] = initialModelViewTransform[0][0] * dx + initialModelViewTransform[0][1] * dy + initialModelViewTransform[0][3];\n  diffModelViewTransform[1][3] = initialModelViewTransform[1][0] * dx + initialModelViewTransform[1][1] * dy + initialModelViewTransform[1][3];\n  diffModelViewTransform[2][3] = initialModelViewTransform[2][0] * dx + initialModelViewTransform[2][1] * dy + initialModelViewTransform[2][3];\n\n  // use iterative closest point algorithm to refine the modelViewTransform\n  const inlierProbs = [1.0, 0.8, 0.6, 0.4, 0.0];\n  let updatedModelViewTransform = diffModelViewTransform; // iteratively update this transform\n  let finalModelViewTransform = null;\n  for (let i = 0; i < inlierProbs.length; i++) {\n    const ret = _doICP({initialModelViewTransform: updatedModelViewTransform, projectionTransform, worldCoords: normalizedWorldCoords, screenCoords, inlierProb: inlierProbs[i]});\n\n    updatedModelViewTransform = ret.modelViewTransform;\n\n    //console.log(\"err\", ret.err);\n\n    if (ret.err < TRACKING_THRESH) {\n      finalModelViewTransform = updatedModelViewTransform;\n      break;\n    }\n  }\n\n  if (finalModelViewTransform === null) return null;\n\n  // de-normalize\n  finalModelViewTransform[0][3] = finalModelViewTransform[0][3] - finalModelViewTransform[0][0] * dx - finalModelViewTransform[0][1] * dy;\n  finalModelViewTransform[1][3] = finalModelViewTransform[1][3] - finalModelViewTransform[1][0] * dx - finalModelViewTransform[1][1] * dy;\n  finalModelViewTransform[2][3] = finalModelViewTransform[2][3] - finalModelViewTransform[2][0] * dx - finalModelViewTransform[2][1] * dy;\n\n  return finalModelViewTransform;\n}\n\n// ICP iteration\n// Question: can someone provide theoretical reference / mathematical proof for the following computations?\nconst _doICP = ({initialModelViewTransform, projectionTransform, worldCoords, screenCoords, inlierProb}) => {\n  const isRobustMode = inlierProb < 1;\n\n  let modelViewTransform = initialModelViewTransform;\n\n  let err0 = 0.0;\n  let err1 = 0.0;\n\n  let E = new Array(worldCoords.length);\n  let E2 = new Array(worldCoords.length);\n  let dxs = new Array(worldCoords.length);\n  let dys = new Array(worldCoords.length);\n\n  for (let l = 0; l <= ICP_MAX_LOOP; l++) {\n    const modelViewProjectionTransform = buildModelViewProjectionTransform(projectionTransform, modelViewTransform);\n\n    for (let n = 0; n < worldCoords.length; n++) {\n      const u = computeScreenCoordiate(modelViewProjectionTransform, worldCoords[n].x, worldCoords[n].y, worldCoords[n].z);\n      const dx = screenCoords[n].x - u.x;\n      const dy = screenCoords[n].y - u.y;\n\n      dxs[n] = dx;\n      dys[n] = dy;\n      E[n] = (dx * dx + dy * dy);\n    }\n\n    let K2; // robust mode only\n    err1 = 0.0;\n    if (isRobustMode) {\n      const inlierNum = Math.max(3, Math.floor(worldCoords.length * inlierProb) - 1);\n      for (let n = 0; n < worldCoords.length; n++) {\n        E2[n] = E[n];\n      }\n      E2.sort((a, b) => {return a-b;});\n\n      K2 = Math.max(E2[inlierNum] * K2_FACTOR, 16.0);\n      for (let n = 0; n < worldCoords.length; n++) {\n        if (E2[n] > K2) err1 += K2/ 6;\n        else err1 +=  K2/6.0 * (1.0 - (1.0-E2[n]/K2)*(1.0-E2[n]/K2)*(1.0-E2[n]/K2));\n      }\n    } else {\n      for (let n = 0; n < worldCoords.length; n++) {\n        err1 += E[n];\n      }\n    }\n    err1 /= worldCoords.length;\n\n    //console.log(\"icp loop\", inlierProb, l, err1);\n\n    if (err1 < ICP_BREAK_LOOP_ERROR_THRESH) break;\n    //if (l > 0 && err1 < ICP_BREAK_LOOP_ERROR_THRESH2 && err1/err0 > ICP_BREAK_LOOP_ERROR_RATIO_THRESH) break;\n    if (l > 0 && err1/err0 > ICP_BREAK_LOOP_ERROR_RATIO_THRESH) break;\n    if (l === ICP_MAX_LOOP) break;\n\n    err0 = err1;\n\n    const dU = [];\n    const allJ_U_S = [];\n    for (let n = 0; n < worldCoords.length; n++) {\n      if (isRobustMode && E[n] > K2) {\n        continue;\n      }\n\n      const J_U_S = _getJ_U_S({modelViewProjectionTransform, modelViewTransform, projectionTransform, worldCoord: worldCoords[n]});\n\n      if (isRobustMode) {\n        const W = (1.0 - E[n]/K2)*(1.0 - E[n]/K2);\n\n        for (let j = 0; j < 2; j++) {\n          for (let i = 0; i < 6; i++) {\n            J_U_S[j][i] *= W;\n          }\n        }\n        dU.push([dxs[n] * W]);\n        dU.push([dys[n] * W]);\n      } else {\n        dU.push([dxs[n]]);\n        dU.push([dys[n]]);\n      }\n\n      for (let i = 0; i < J_U_S.length; i++) {\n        allJ_U_S.push(J_U_S[i]);\n      }\n    }\n\n    const dS = _getDeltaS({dU, J_U_S: allJ_U_S});\n    if (dS === null) break;\n\n    modelViewTransform = _updateModelViewTransform({modelViewTransform, dS});\n  }\n  return {modelViewTransform, err: err1};\n}\n\nconst _updateModelViewTransform = ({modelViewTransform, dS}) => {\n  /**\n   * dS has 6 paragrams, first half is rotation, second half is translation\n   * rotation is expressed in angle-axis, \n   *   [S[0], S[1] ,S[2]] is the axis of rotation, and the magnitude is the angle\n   */\n  let ra = dS[0] * dS[0] + dS[1] * dS[1] + dS[2] * dS[2];\n  let q0, q1, q2;\n  if( ra < 0.000001 ) {\n    q0 = 1.0;\n    q1 = 0.0;\n    q2 = 0.0;\n    ra = 0.0;\n  } else {\n    ra = Math.sqrt(ra);\n    q0 = dS[0] / ra;\n    q1 = dS[1] / ra;\n    q2 = dS[2] / ra;\n  }\n\n  const cra = Math.cos(ra);\n  const sra = Math.sin(ra);\n  const one_cra = 1.0 - cra;\n\n  // mat is [R|t], 3D rotation and translation\n  mat[0][0] = q0*q0*one_cra + cra;\n  mat[0][1] = q0*q1*one_cra - q2*sra;\n  mat[0][2] = q0*q2*one_cra + q1*sra;\n  mat[0][3] = dS[3];\n  mat[1][0] = q1*q0*one_cra + q2*sra;\n  mat[1][1] = q1*q1*one_cra + cra;\n  mat[1][2] = q1*q2*one_cra - q0*sra;\n  mat[1][3] = dS[4]\n  mat[2][0] = q2*q0*one_cra - q1*sra;\n  mat[2][1] = q2*q1*one_cra + q0*sra;\n  mat[2][2] = q2*q2*one_cra + cra;\n  mat[2][3] = dS[5];\n\n  // the updated transform is the original transform x delta transform\n  const mat2 = [[],[],[]];\n  for (let j = 0; j < 3; j++ ) {\n    for (let i = 0; i < 4; i++ ) {\n      mat2[j][i] = modelViewTransform[j][0] * mat[0][i]\n                   + modelViewTransform[j][1] * mat[1][i]\n                   + modelViewTransform[j][2] * mat[2][i];\n    }\n    mat2[j][3] += modelViewTransform[j][3];\n  }\n  return mat2;\n}\n\nconst _getDeltaS = ({dU, J_U_S}) => {\n  const J = new Matrix(J_U_S);\n  const U = new Matrix(dU);\n\n  const JT = J.transpose();\n  const JTJ = JT.mmul(J);\n  const JTU = JT.mmul(U);\n\n  let JTJInv;\n  try {\n    JTJInv = inverse(JTJ);\n  } catch (e) {\n    return null;\n  }\n\n  const S = JTJInv.mmul(JTU);\n  return S.to1DArray();\n}\n\nconst _getJ_U_S = ({modelViewProjectionTransform, modelViewTransform, projectionTransform, worldCoord}) => {\n  const T = modelViewTransform;\n  const {x, y, z} = worldCoord;\n\n  const u = applyModelViewProjectionTransform(modelViewProjectionTransform, x, y, z);\n\n  const z2 = u.z * u.z;\n  // Question: This is the most confusing matrix to me. I've no idea how to derive this.\n  //J_U_Xc[0][0] = (projectionTransform[0][0] * u.z - projectionTransform[2][0] * u.x) / z2;\n  //J_U_Xc[0][1] = (projectionTransform[0][1] * u.z - projectionTransform[2][1] * u.x) / z2;\n  //J_U_Xc[0][2] = (projectionTransform[0][2] * u.z - projectionTransform[2][2] * u.x) / z2;\n  //J_U_Xc[1][0] = (projectionTransform[1][0] * u.z - projectionTransform[2][0] * u.y) / z2;\n  //J_U_Xc[1][1] = (projectionTransform[1][1] * u.z - projectionTransform[2][1] * u.y) / z2;\n  //J_U_Xc[1][2] = (projectionTransform[1][2] * u.z - projectionTransform[2][2] * u.y) / z2;\n  \n  // The above is the original implementation, but simplify to below becuase projetionTransform[2][0] and [2][1] are zero\n  J_U_Xc[0][0] = (projectionTransform[0][0] * u.z) / z2;\n  J_U_Xc[0][1] = (projectionTransform[0][1] * u.z) / z2;\n  J_U_Xc[0][2] = (projectionTransform[0][2] * u.z - projectionTransform[2][2] * u.x) / z2;\n  J_U_Xc[1][0] = (projectionTransform[1][0] * u.z) / z2;\n  J_U_Xc[1][1] = (projectionTransform[1][1] * u.z) / z2;\n  J_U_Xc[1][2] = (projectionTransform[1][2] * u.z - projectionTransform[2][2] * u.y) / z2;\n\n  /*\n    J_Xc_S should be like this, but z is zero, so we can simplify\n    [T[0][2] * y - T[0][1] * z, T[0][0] * z - T[0][2] * x, T[0][1] * x - T[0][0] * y, T[0][0], T[0][1], T[0][2]],\n    [T[1][2] * y - T[1][1] * z, T[1][0] * z - T[1][2] * x, T[1][1] * x - T[1][0] * y, T[1][0], T[1][1], T[1][2]],\n    [T[2][2] * y - T[2][1] * z, T[2][0] * z - T[2][2] * x, T[2][1] * x - T[2][0] * y, T[2][0], T[2][1], T[2][2]],\n  */\n  J_Xc_S[0][0] = T[0][2] * y;\n  J_Xc_S[0][1] = -T[0][2] * x;\n  J_Xc_S[0][2] = T[0][1] * x - T[0][0] * y;\n  J_Xc_S[0][3] = T[0][0];\n  J_Xc_S[0][4] = T[0][1]; \n  J_Xc_S[0][5] = T[0][2];\n\n  J_Xc_S[1][0] = T[1][2] * y;\n  J_Xc_S[1][1] = -T[1][2] * x;\n  J_Xc_S[1][2] = T[1][1] * x - T[1][0] * y;\n  J_Xc_S[1][3] = T[1][0];\n  J_Xc_S[1][4] = T[1][1];\n  J_Xc_S[1][5] = T[1][2];\n\n  J_Xc_S[2][0] = T[2][2] * y;\n  J_Xc_S[2][1] = -T[2][2] * x;\n  J_Xc_S[2][2] = T[2][1] * x - T[2][0] * y;\n  J_Xc_S[2][3] = T[2][0];\n  J_Xc_S[2][4] = T[2][1];\n  J_Xc_S[2][5] = T[2][2];\n\n  const J_U_S = [[], []];\n  for (let j = 0; j < 2; j++) {\n    for (let i = 0; i < 6; i++) {\n      J_U_S[j][i] = 0.0;\n      for (let k = 0; k < 3; k++ ) {\n        J_U_S[j][i] += J_U_Xc[j][k] * J_Xc_S[k][i];\n      }\n    }\n  }\n  return J_U_S;\n}\n\nexport {\n  refineEstimate\n}\n","import {estimate} from './estimate.js';\nimport {refineEstimate} from './refine-estimate.js';\n\nclass Estimator {\n  constructor(projectionTransform) {\n    this.projectionTransform = projectionTransform;\n  }\n\n  // Solve homography between screen points and world points using Direct Linear Transformation\n  // then decompose homography into rotation and translation matrix (i.e. modelViewTransform)\n  estimate({screenCoords, worldCoords}) {\n    const modelViewTransform = estimate({screenCoords, worldCoords, projectionTransform: this.projectionTransform});\n    return modelViewTransform;\n  }\n\n  // Given an initial guess of the modelViewTransform and new pairs of screen-world coordinates, \n  // use Iterative Closest Point to refine the transformation\n  //refineEstimate({initialModelViewTransform, screenCoords, worldCoords}) {\n  refineEstimate({initialModelViewTransform, worldCoords, screenCoords}) {\n    const updatedModelViewTransform = refineEstimate({initialModelViewTransform, worldCoords, screenCoords, projectionTransform: this.projectionTransform});\n    return updatedModelViewTransform;\n  }\n}\n\nexport {\n  Estimator,\n}\n","import { Matcher } from './matching/matcher.js';\nimport { Estimator } from './estimation/estimator.js';\n\nlet projectionTransform = null;\nlet matchingDataList = null;\nlet debugMode = false;\nlet matcher = null;\nlet estimator = null;\n\nonmessage = (msg) => {\n  const { data } = msg;\n\n  switch (data.type) {\n    case \"setup\":\n      projectionTransform = data.projectionTransform;\n      matchingDataList = data.matchingDataList;\n      debugMode = data.debugMode;\n      matcher = new Matcher(data.inputWidth, data.inputHeight, debugMode);\n      estimator = new Estimator(data.projectionTransform);\n      break;\n\n    case \"match\":\n      const interestedTargetIndexes = data.targetIndexes;\n\n      let matchedTargetIndex = -1;\n      let matchedModelViewTransform = null;\n      let matchedDebugExtra = null;\n\n      for (let i = 0; i < interestedTargetIndexes.length; i++) {\n        const matchingIndex = interestedTargetIndexes[i];\n\n        const { keyframeIndex, screenCoords, worldCoords, debugExtra } = matcher.matchDetection(matchingDataList[matchingIndex], data.featurePoints);\n        matchedDebugExtra = debugExtra;\n\n        if (keyframeIndex !== -1) {\n          const modelViewTransform = estimator.estimate({ screenCoords, worldCoords });\n\n          if (modelViewTransform) {\n            matchedTargetIndex = matchingIndex;\n            matchedModelViewTransform = modelViewTransform;\n          }\n          break;\n        }\n      }\n\n      postMessage({\n        type: 'matchDone',\n        targetIndex: matchedTargetIndex,\n        modelViewTransform: matchedModelViewTransform,\n        debugExtra: matchedDebugExtra\n      });\n      break;\n\n    case 'trackUpdate':\n      const { modelViewTransform, worldCoords, screenCoords } = data;\n      const finalModelViewTransform = estimator.refineEstimate({ initialModelViewTransform: modelViewTransform, worldCoords, screenCoords });\n      postMessage({\n        type: 'trackUpdateDone',\n        modelViewTransform: finalModelViewTransform,\n      });\n      break;\n\n    case \"dispose\":\n      close();\n      break;\n\n    default:\n      throw new Error(`Invalid message type '${data.type}'`);\n  }\n};\n\n"],"names":["TinyQueue","data","compare","defaultCompare","i","item","top","bottom","pos","parent","current","halfLength","left","best","right","a","b","compute","options","v1","v2","d","x","bitCount","v","c","kHoughBinDelta","computeHoughMatches","keywidth","keyheight","querywidth","queryheight","matches","maxX","minX","maxY","minY","numAngleBins","numScaleBins","minScale","maxScale","scaleOneOverLogK","maxDim","keycenterX","keycenterY","projectedDims","queryscale","keyscale","scale","a1","a2","binSize","numXBins","numYBins","numXYBins","numXYAngleBins","querypointValids","querypointBinLocations","votes","querypoint","keypoint","y","angle","_mapCorrespondence","fbinX","fbinY","fbinAngle","fbinScale","binX","binY","binScale","binAngle","dx","binX2","dy","binY2","dangle","binAngle2","dscale","binScale2","binIndex","maxVotes","maxVoteIndex","index","houghMatches","queryBins","temp","cos","sin","S","tp","tx","ty","toString","isAnyArray","value","max","input","_options$fromIndex","fromIndex","_options$toIndex","toIndex","maxValue","min","minValue","rescale","output","currentMin","currentMax","_options$min","_options$max","factor","indent","indentData","inspectMatrix","inspectMatrixWithOptions","matrix","maxRows","maxColumns","maxNumSize","padMinus","inspectData","rows","columns","maxI","maxJ","result","loop","j","line","formatNumber","num","formatNumber2","len","str","fix","exp","installMathOperations","AbstractMatrix","Matrix","arg0","checkRowIndex","outer","checkColumnIndex","checkRowVector","vector","checkColumnVector","checkRowIndices","rowIndices","checkColumnIndices","columnIndices","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","length","array","name","checkNonEmpty","sumByRow","sum","sumByColumn","sumAll","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","varianceByColumn","varianceAll","size","centerByRow","centerByColumn","centerAll","getScaleByRow","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","newRows","newColumns","newData","newMatrix","row","column","random","interval","l","matrix1","matrix2","callback","copy","previousColumn","isEchelonForm","checked","isReducedEchelonForm","k","h","iMax","tmp","m","n","p","pivot","row1","row2","column1","column2","by","idx","diag","type","vector2","vector1","dot","other","Bcolj","s","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","r1","c1","r2","c2","embed","mat","r","resultat","blockMult","halfRows","halfCols","middle","first","last","q","AxI","IxB","compareFunction","compareNumbers","indices","rowIndex","columnIndex","trace","center","isArrayOfNumbers","element","nRows","nColumns","arrayData","newRow","WrapperMatrix2D","LuDecomposition","lu","pivotVector","pivotSign","t","LUcolj","kmax","col","count","X","determinant","hypotenuse","QrDecomposition","qr","rdiag","nrm","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","wantv","swapped","aux","nu","ni","U","V","e","work","si","nct","nrt","mrc","pp","eps","kase","alpha","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","scols","Ls","VL","vrows","urows","VLU","vcols","ucols","tol","ii","inverse","useSVD","solve","leftHandSide","rightHandSide","mRandSeed","createRandomizer","arr","sampleSize","linePointSide","A","B","C","checkFourPointsConsistent","x1","x2","x3","x4","x1p","x2p","x3p","x4p","checkThreePointsConsistent","C1","C2","C3","matrixInverse33","threshold","det","oneOver","multiplyPointHomographyInhomogenous","H","w","xp","smallestTriangleArea","v12","_vector","v13","v14","v32","v34","_areaOfTriangle","a3","a4","quadrilateralConvex","u","solveHomography","srcPoints","dstPoints","normSrcPoints","srcParam","_normalizePoints","normDstPoints","dstParam","AData","BData","AT","ATA","ATB","_denormalizeHomography","coords","sumX","sumY","meanX","meanY","sumDiff","diffX","diffY","normPoints","nH","sMeanX","sMeanY","CAUCHY_SCALE","CHUNK_SIZE","NUM_HYPOTHESES","NUM_HYPOTHESES_QUICK","computeHomography","keyframe","quickMode","testPoints","oneOverScale2","chuckSize","randomizer","perm","numHypothesis","maxTrials","trial","Hs","_checkHomographyPointsGeometricallyConsistent","hypotheses","curChuckSize","chuckEnd","cost","_cauchyProjectiveReprojectionCost","h1","h2","finalH","_normalizeHomography","_checkHeuristics","HInv","mp","inH","srcPoint","dstPoint","mappedPoints","i1","i2","i3","INLIER_THRESHOLD","MIN_NUM_INLIERS","CLUSTER_MAX_POP","HAMMING_THRESHOLD","match","querypoints","debugMode","debugExtra","keypoints","rootNode","keypointIndexes","queue","_query","bestIndex","bestD1","bestD2","hammingCompute","inlierMatches","_findInlierMatches","dThreshold2","matches2","mapquerypoint","houghMatches2","H2","inlierMatches2","node","numPop","distances","centerPointIndex","minD","threshold2","goodMatches","Matcher","queryWidth","queryHeight","keyframes","featurePoints","bestResult","frameDebugExtra","screenCoords","worldCoords","estimate","projectionTransform","Harray","K","KInvH","norm1","norm2","tnorm","rotate","norm3","tran","buildModelViewProjectionTransform","modelViewTransform","applyModelViewProjectionTransform","modelViewProjectionTransform","z","ux","uy","uz","computeScreenCoordiate","TRACKING_THRESH","K2_FACTOR","ICP_MAX_LOOP","ICP_BREAK_LOOP_ERROR_THRESH","ICP_BREAK_LOOP_ERROR_RATIO_THRESH","J_U_Xc","J_Xc_S","refineEstimate","initialModelViewTransform","normalizedWorldCoords","diffModelViewTransform","inlierProbs","updatedModelViewTransform","finalModelViewTransform","ret","_doICP","inlierProb","isRobustMode","err0","err1","E","E2","dxs","dys","K2","inlierNum","dU","allJ_U_S","J_U_S","_getJ_U_S","W","dS","_getDeltaS","_updateModelViewTransform","ra","q0","q1","q2","cra","sra","one_cra","mat2","J","JT","JTJ","JTU","JTJInv","worldCoord","T","z2","Estimator","matchingDataList","matcher","estimator","msg","interestedTargetIndexes","matchedTargetIndex","matchedModelViewTransform","matchedDebugExtra","matchingIndex","keyframeIndex"],"mappings":"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","x_google_ignoreList":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}